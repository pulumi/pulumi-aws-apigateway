// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsapigateway;

import com.pulumi.aws.s3.Bucket;
import com.pulumi.awsapigateway.enums.APIKeySource;
import com.pulumi.awsapigateway.enums.RequestValidator;
import com.pulumi.awsapigateway.inputs.RouteArgs;
import com.pulumi.awsapigateway.inputs.SwaggerGatewayResponseArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RestAPIArgs extends com.pulumi.resources.ResourceArgs {

    public static final RestAPIArgs Empty = new RestAPIArgs();

    /**
     * The source for the apikey. This can either be a HEADER or AUTHORIZER. If `apiKeyRequired` is
     * set to true on a route, and this is not defined the value will default to HEADER.
     * 
     */
    @Import(name="apiKeySource")
    private @Nullable APIKeySource apiKeySource;

    /**
     * @return The source for the apikey. This can either be a HEADER or AUTHORIZER. If `apiKeyRequired` is
     * set to true on a route, and this is not defined the value will default to HEADER.
     * 
     */
    public Optional<APIKeySource> apiKeySource() {
        return Optional.ofNullable(this.apiKeySource);
    }

    /**
     * List of binary media types supported by the REST API. By default, the REST API supports only UTF-8-encoded text payloads.
     * If importing an OpenAPI specification via the body argument, this corresponds to the x-amazon-apigateway-binary-media-types extension.
     * If the argument value is provided and is different than the OpenAPI value, the argument value will override the OpenAPI value.
     * 
     */
    @Import(name="binaryMediaTypes")
    private @Nullable List<String> binaryMediaTypes;

    /**
     * @return List of binary media types supported by the REST API. By default, the REST API supports only UTF-8-encoded text payloads.
     * If importing an OpenAPI specification via the body argument, this corresponds to the x-amazon-apigateway-binary-media-types extension.
     * If the argument value is provided and is different than the OpenAPI value, the argument value will override the OpenAPI value.
     * 
     */
    public Optional<List<String>> binaryMediaTypes() {
        return Optional.ofNullable(this.binaryMediaTypes);
    }

    /**
     * Description of the REST API.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of the REST API.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Whether clients can invoke your API by using the default execute-api endpoint. By default, clients can invoke
     * your API with the default https://{api_id}.execute-api.{region}.amazonaws.com endpoint. To require that
     * clients use a custom domain name to invoke your API, disable the default endpoint. Defaults to false.
     * 
     */
    @Import(name="disableExecuteApiEndpoint")
    private @Nullable Output<Boolean> disableExecuteApiEndpoint;

    /**
     * @return Whether clients can invoke your API by using the default execute-api endpoint. By default, clients can invoke
     * your API with the default https://{api_id}.execute-api.{region}.amazonaws.com endpoint. To require that
     * clients use a custom domain name to invoke your API, disable the default endpoint. Defaults to false.
     * 
     */
    public Optional<Output<Boolean>> disableExecuteApiEndpoint() {
        return Optional.ofNullable(this.disableExecuteApiEndpoint);
    }

    /**
     * Define custom gateway responses for the API. This can be used to properly enable
     * CORS for Lambda Authorizers.
     * 
     */
    @Import(name="gatewayResponses")
    private @Nullable Map<String,SwaggerGatewayResponseArgs> gatewayResponses;

    /**
     * @return Define custom gateway responses for the API. This can be used to properly enable
     * CORS for Lambda Authorizers.
     * 
     */
    public Optional<Map<String,SwaggerGatewayResponseArgs>> gatewayResponses() {
        return Optional.ofNullable(this.gatewayResponses);
    }

    /**
     * Request Validator specifies the validator to use at the API level. Note method level validators
     * override this.
     * 
     */
    @Import(name="requestValidator")
    private @Nullable RequestValidator requestValidator;

    /**
     * @return Request Validator specifies the validator to use at the API level. Note method level validators
     * override this.
     * 
     */
    public Optional<RequestValidator> requestValidator() {
        return Optional.ofNullable(this.requestValidator);
    }

    /**
     * Routes to use to initialize the APIGateway.  These will be used to create the Swagger
     * specification for the API.
     * 
     * Either `swaggerString` or `routes` must be specified.
     * 
     */
    @Import(name="routes")
    private @Nullable List<RouteArgs> routes;

    /**
     * @return Routes to use to initialize the APIGateway.  These will be used to create the Swagger
     * specification for the API.
     * 
     * Either `swaggerString` or `routes` must be specified.
     * 
     */
    public Optional<List<RouteArgs>> routes() {
        return Optional.ofNullable(this.routes);
    }

    /**
     * The stage name for your API. This will get added as a base path to your API url.
     * 
     */
    @Import(name="stageName")
    private @Nullable Output<String> stageName;

    /**
     * @return The stage name for your API. This will get added as a base path to your API url.
     * 
     */
    public Optional<Output<String>> stageName() {
        return Optional.ofNullable(this.stageName);
    }

    /**
     * Bucket to use for placing resources for static resources.  If not provided a default one will
     * be created on your behalf if any `StaticRoute`s are provided.
     * 
     */
    @Import(name="staticRoutesBucket")
    private @Nullable Output<Bucket> staticRoutesBucket;

    /**
     * @return Bucket to use for placing resources for static resources.  If not provided a default one will
     * be created on your behalf if any `StaticRoute`s are provided.
     * 
     */
    public Optional<Output<Bucket>> staticRoutesBucket() {
        return Optional.ofNullable(this.staticRoutesBucket);
    }

    /**
     * A Swagger specification already in string form to use to initialize the APIGateway.  Note
     * that you must manually provide permission for any route targets to be invoked by API Gateway
     * when using `swaggerString`.
     * 
     * Either `swaggerString` or `routes` must be specified.
     * 
     */
    @Import(name="swaggerString")
    private @Nullable Output<String> swaggerString;

    /**
     * @return A Swagger specification already in string form to use to initialize the APIGateway.  Note
     * that you must manually provide permission for any route targets to be invoked by API Gateway
     * when using `swaggerString`.
     * 
     * Either `swaggerString` or `routes` must be specified.
     * 
     */
    public Optional<Output<String>> swaggerString() {
        return Optional.ofNullable(this.swaggerString);
    }

    /**
     * &#39;Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present,
     * tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return &#39;Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present,
     * tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private RestAPIArgs() {}

    private RestAPIArgs(RestAPIArgs $) {
        this.apiKeySource = $.apiKeySource;
        this.binaryMediaTypes = $.binaryMediaTypes;
        this.description = $.description;
        this.disableExecuteApiEndpoint = $.disableExecuteApiEndpoint;
        this.gatewayResponses = $.gatewayResponses;
        this.requestValidator = $.requestValidator;
        this.routes = $.routes;
        this.stageName = $.stageName;
        this.staticRoutesBucket = $.staticRoutesBucket;
        this.swaggerString = $.swaggerString;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RestAPIArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RestAPIArgs $;

        public Builder() {
            $ = new RestAPIArgs();
        }

        public Builder(RestAPIArgs defaults) {
            $ = new RestAPIArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param apiKeySource The source for the apikey. This can either be a HEADER or AUTHORIZER. If `apiKeyRequired` is
         * set to true on a route, and this is not defined the value will default to HEADER.
         * 
         * @return builder
         * 
         */
        public Builder apiKeySource(@Nullable APIKeySource apiKeySource) {
            $.apiKeySource = apiKeySource;
            return this;
        }

        /**
         * @param binaryMediaTypes List of binary media types supported by the REST API. By default, the REST API supports only UTF-8-encoded text payloads.
         * If importing an OpenAPI specification via the body argument, this corresponds to the x-amazon-apigateway-binary-media-types extension.
         * If the argument value is provided and is different than the OpenAPI value, the argument value will override the OpenAPI value.
         * 
         * @return builder
         * 
         */
        public Builder binaryMediaTypes(@Nullable List<String> binaryMediaTypes) {
            $.binaryMediaTypes = binaryMediaTypes;
            return this;
        }

        /**
         * @param binaryMediaTypes List of binary media types supported by the REST API. By default, the REST API supports only UTF-8-encoded text payloads.
         * If importing an OpenAPI specification via the body argument, this corresponds to the x-amazon-apigateway-binary-media-types extension.
         * If the argument value is provided and is different than the OpenAPI value, the argument value will override the OpenAPI value.
         * 
         * @return builder
         * 
         */
        public Builder binaryMediaTypes(String... binaryMediaTypes) {
            return binaryMediaTypes(List.of(binaryMediaTypes));
        }

        /**
         * @param description Description of the REST API.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of the REST API.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param disableExecuteApiEndpoint Whether clients can invoke your API by using the default execute-api endpoint. By default, clients can invoke
         * your API with the default https://{api_id}.execute-api.{region}.amazonaws.com endpoint. To require that
         * clients use a custom domain name to invoke your API, disable the default endpoint. Defaults to false.
         * 
         * @return builder
         * 
         */
        public Builder disableExecuteApiEndpoint(@Nullable Output<Boolean> disableExecuteApiEndpoint) {
            $.disableExecuteApiEndpoint = disableExecuteApiEndpoint;
            return this;
        }

        /**
         * @param disableExecuteApiEndpoint Whether clients can invoke your API by using the default execute-api endpoint. By default, clients can invoke
         * your API with the default https://{api_id}.execute-api.{region}.amazonaws.com endpoint. To require that
         * clients use a custom domain name to invoke your API, disable the default endpoint. Defaults to false.
         * 
         * @return builder
         * 
         */
        public Builder disableExecuteApiEndpoint(Boolean disableExecuteApiEndpoint) {
            return disableExecuteApiEndpoint(Output.of(disableExecuteApiEndpoint));
        }

        /**
         * @param gatewayResponses Define custom gateway responses for the API. This can be used to properly enable
         * CORS for Lambda Authorizers.
         * 
         * @return builder
         * 
         */
        public Builder gatewayResponses(@Nullable Map<String,SwaggerGatewayResponseArgs> gatewayResponses) {
            $.gatewayResponses = gatewayResponses;
            return this;
        }

        /**
         * @param requestValidator Request Validator specifies the validator to use at the API level. Note method level validators
         * override this.
         * 
         * @return builder
         * 
         */
        public Builder requestValidator(@Nullable RequestValidator requestValidator) {
            $.requestValidator = requestValidator;
            return this;
        }

        /**
         * @param routes Routes to use to initialize the APIGateway.  These will be used to create the Swagger
         * specification for the API.
         * 
         * Either `swaggerString` or `routes` must be specified.
         * 
         * @return builder
         * 
         */
        public Builder routes(@Nullable List<RouteArgs> routes) {
            $.routes = routes;
            return this;
        }

        /**
         * @param routes Routes to use to initialize the APIGateway.  These will be used to create the Swagger
         * specification for the API.
         * 
         * Either `swaggerString` or `routes` must be specified.
         * 
         * @return builder
         * 
         */
        public Builder routes(RouteArgs... routes) {
            return routes(List.of(routes));
        }

        /**
         * @param stageName The stage name for your API. This will get added as a base path to your API url.
         * 
         * @return builder
         * 
         */
        public Builder stageName(@Nullable Output<String> stageName) {
            $.stageName = stageName;
            return this;
        }

        /**
         * @param stageName The stage name for your API. This will get added as a base path to your API url.
         * 
         * @return builder
         * 
         */
        public Builder stageName(String stageName) {
            return stageName(Output.of(stageName));
        }

        /**
         * @param staticRoutesBucket Bucket to use for placing resources for static resources.  If not provided a default one will
         * be created on your behalf if any `StaticRoute`s are provided.
         * 
         * @return builder
         * 
         */
        public Builder staticRoutesBucket(@Nullable Output<Bucket> staticRoutesBucket) {
            $.staticRoutesBucket = staticRoutesBucket;
            return this;
        }

        /**
         * @param staticRoutesBucket Bucket to use for placing resources for static resources.  If not provided a default one will
         * be created on your behalf if any `StaticRoute`s are provided.
         * 
         * @return builder
         * 
         */
        public Builder staticRoutesBucket(Bucket staticRoutesBucket) {
            return staticRoutesBucket(Output.of(staticRoutesBucket));
        }

        /**
         * @param swaggerString A Swagger specification already in string form to use to initialize the APIGateway.  Note
         * that you must manually provide permission for any route targets to be invoked by API Gateway
         * when using `swaggerString`.
         * 
         * Either `swaggerString` or `routes` must be specified.
         * 
         * @return builder
         * 
         */
        public Builder swaggerString(@Nullable Output<String> swaggerString) {
            $.swaggerString = swaggerString;
            return this;
        }

        /**
         * @param swaggerString A Swagger specification already in string form to use to initialize the APIGateway.  Note
         * that you must manually provide permission for any route targets to be invoked by API Gateway
         * when using `swaggerString`.
         * 
         * Either `swaggerString` or `routes` must be specified.
         * 
         * @return builder
         * 
         */
        public Builder swaggerString(String swaggerString) {
            return swaggerString(Output.of(swaggerString));
        }

        /**
         * @param tags &#39;Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present,
         * tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags &#39;Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present,
         * tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public RestAPIArgs build() {
            return $;
        }
    }

}
