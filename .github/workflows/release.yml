name: Release provider & SDKs
on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version to be released"
        type: string
        required: true
      publishProvider:
        description: "Publish provider binaries (to GH & S3)"
        default: true
        type: boolean
      publishNpm:
        description: "Publish Node.js SDK"
        default: true
        type: boolean
      publishNuget:
        description: "Publish .NET SDK"
        default: true
        type: boolean
      publishPython:
        description: "Publish Python SDK"
        default: true
        type: boolean
      publishJava:
        description: "Publish Java SDK"
        default: true
        type: boolean
      publishGo:
        description: "Publish Go SDK"
        default: true
        type: boolean

env:
  # THIS GITHUB_TOKEN IS A REQUIREMENT TO BE ABLE TO WRITE TO GH RELEASES
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  # IF YOU NEED TO PUBLISH A NPM PACKAGE THEN ENSURE A NPM_TOKEN SECRET IS SET
  # IF YOU WANT TO PUBLISH TO A PRIVATE NPM REGISTRY
  # THEN ENSURE THE NPM_REGISTRY_URL IS CHANGED
  NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
  NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
  NPM_REGISTRY_URL: https://registry.npmjs.org
  # IF YOU NEED TO PUBLISH A NUGET PACKAGE THEN ENSURE AN NUGET_PUBLISH_KEY
  # SECRET IS SET. IF YOU WANT TO PUBLISH TO AN ALTERNATIVE
  # NPM REGISTRY THEN ENSURE THE NPM_REGISTRY_URL IS CHANGED
  NUGET_PUBLISH_KEY: ${{ secrets.NUGET_PUBLISH_KEY }}
  NUGET_FEED_URL: https://api.nuget.org/v3/index.json
  # ENSURE AN PYPI_API_TOKEN SECRET IS SET
  # IF YOU WANT TO PUBLISH TO AN ALTERNATIVE
  # PYPI REGISTRY THEN ENSURE THE PYPI_REPOSITORY_URL IS SET. IF YOU ARE USING AN API_TOKEN THEN
  # YOU DO NOT NEED TO CHANGE THE PYPI_USERNAME (__token__) , IF YOU ARE USING PASSWORD AUTHENTICATION THEN YOU WILL
  # NEED TO CHANGE TO USE THE CORRECT PASSWORD
  PYPI_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
  PYPI_USERNAME: "pulumi"
  PYPI_REPOSITORY_URL: ""
  # YOU WILL NEED TO SPECIFY A STAGING SERVER AND ITS CREDENTIALS AS WELL AS THE
  # SIGNING INFORMATION FOR THE PACKAGE
  SIGNING_KEY: ${{ secrets.JAVA_SIGNING_KEY }}
  SIGNING_KEY_ID: ${{ secrets.JAVA_SIGNING_KEY_ID }}
  SIGNING_PASSWORD: ${{ secrets.JAVA_SIGNING_PASSWORD }}
  PUBLISH_REPO_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}
  PUBLISH_REPO_USERNAME: ${{ secrets.OSSRH_USERNAME }}
  PACKAGE_VERSION: ${{ inputs.version }}
  DOTNET_VERSION: "3.1.301"
  GO_VERSION: "1.19.x"
  JAVA_VERSION: "11"
  NODE_VERSION: "18.x"
  PYTHON_VERSION: "3.9"
jobs:
  publish_binary:
    name: Publish Provider Binary
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: ${{ env.NODE_VERSION }}

      - uses: MOZGIII/install-ldid-action@v1
        with:
          tag: v2.1.5-procursus2

      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install Pulumi CLI
        uses: pulumi/action-install-pulumi-cli@v1.0.1

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-region: us-east-2
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          role-duration-seconds: 3600
          role-external-id: upload-pulumi-release
          role-session-name: uploader@githubActions
          role-to-assume: ${{ secrets.AWS_UPLOAD_ROLE_ARN }}

      - name: Create Provider Binaries
        run: make dist VERSION=${{ inputs.version }}

      - name: Upload to S3
        if: inputs.publishProvider == true
        run: aws s3 cp dist s3://get.pulumi.com/releases/plugins/ --recursive

      - name: Create GitHub Release
        if: inputs.publishProvider == true
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dist/*.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.PULUMI_BOT_TOKEN }}

  publish_sdk:
    name: Publish SDKs
    runs-on: ubuntu-latest
    needs: publish_binary
    strategy:
      fail-fast: false
      matrix:
        language:
          - nodejs
          - python
          - dotnet
          - go
          - java
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install Pulumi CLI
        uses: pulumi/action-install-pulumi-cli@v1.0.1

      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: ${{env.NPM_REGISTRY_URL}}

      - name: Setup DotNet
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Setup Python
        uses: actions/setup-python@v1
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          cache: gradle
          distribution: temurin
          java-version: ${{ env.JAVA_VERSION }}

      - name: Build SDK
        run: make build_${{ matrix.language }}_sdk VERSION=${{ inputs.version }}

      - name: Check worktree clean
        run: |
          git update-index -q --refresh
          if ! git diff-files --quiet; then
              >&2 echo "error: working tree is not clean, aborting!"
              git status
              git diff
              exit 1
          fi

      - name: Publish Python SDK
        if: ${{ inputs.publishPython && matrix.language == 'python' }}
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: ${{ env.PYPI_USERNAME }}
          password: ${{ env.PYPI_PASSWORD }}
          packages_dir: ${{github.workspace}}/sdk/python/bin/dist

      - name: Publish Node SDK
        if: ${{ inputs.publishNpm && matrix.language == 'nodejs' }}
        uses: JS-DevTools/npm-publish@v1
        with:
          access: "public"
          token: ${{ env.NPM_TOKEN }}
          package: ${{github.workspace}}/sdk/nodejs/bin/package.json

      - name: Publish NuGet SDK
        if: ${{ inputs.publishNuget && matrix.language == 'dotnet' }}
        run: |
          dotnet nuget push ${{github.workspace}}/sdk/dotnet/bin/Debug/*.nupkg -s ${{ env.NUGET_FEED_URL }} -k ${{ env.NUGET_PUBLISH_KEY }}
          echo "done publishing packages"

      - name: Publish Java SDK
        if: ${{ inputs.publishJava && matrix.language == 'java' }}
        uses: gradle/gradle-build-action@9b814496b50909128c6a52622b416c5ffa04db49
        with:
          arguments: publishToSonatype closeAndReleaseSonatypeStagingRepository
          build-root-directory: ./sdk/java
          gradle-version: 7.4.1

      - name: Publish Go SDK
        if: ${{ inputs.publishGo && matrix.language == 'go' }}
        run: git tag sdk/v${{ inputs.version }} && git push origin sdk/v${{ inputs.version }}
